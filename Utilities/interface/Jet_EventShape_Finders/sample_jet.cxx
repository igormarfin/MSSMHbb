//  Sample macro using the Jet Finder in libJetFinder.so using Jade algorithm,
//  for example.
//  This macro reads the events generated by a test program of Event.
//
//                                          Aug/15/2000  M. Iwasaki

#include <stdlib.h>
int sample_jet(int nEvent = 10)
{
  gROOT->Reset();

//   Load libJetFind library 
  gSystem->Load("libJetFind.so");
//   Load libEvent library in $ROOTSYS/test
  gSystem->Load("libEvent.so");

//   Use the events generated in $ROOTSYS/test
  TFile f("Event.root");
//   Read Tree named "T" in memory. Tree pointer is assigned the same name
  TTree *T = (TTree*)f.Get("T");

//   Set up the JetFinder
  JetFinder  *jetf = new JetFinder(0.004);   // Default Durham algorithm

//   Make particle 4-vector list
  TObjArray* veclist = new TObjArray();    

//   Start main  analysis
  Event *event = new Event();   

  TBranch *branch  = T->GetBranch("event");
  branch->SetAddress(&event);
  Int_t nevent = T->GetEntries();
  if (nevent < nEvent) nEvent = nevent;
  
// Event loop
  for (int iEvent = 0; iEvent < nEvent; iEvent++) {
      
    T->GetEvent(iEvent);      

//  Number of the tracks
    Int_t nTracks = event->GetNtrack(); 
    
//  Event cut # track >= 2
    if (nTracks < 2) continue;
    
//  Clean up veclist
    veclist -> Delete(); 

    Float_t Pvec3[3];
    
//  Track loop    
    TClonesArray *tracks = event->GetTracks();
    for (Int_t ntrk=0; ntrk<nTracks; ntrk++) {
      Track* trk = (Track*)tracks->UncheckedAt(ntrk);
	
      Pvec3[0] = trk->GetPx();
      Pvec3[1] = trk->GetPy();
      Pvec3[2] = trk->GetPz();
      
      Float_t  E_trk = 0.1396 * 0.1396; // Assume pion mass
      for (int t=0; t<3; t++) {
	E_trk += Pvec3[t] * Pvec3[t];
      }
      E_trk = sqrt(E_trk);
      
      TVector3 vec3(Pvec3);
      TLorentzVector *vec4 = new TLorentzVector(vec3,E_trk);

      veclist->Add(vec4);  // Fill particle 4-vector list.
    }
      
      
//  Do JetFinding with Y-cut = 0.0040
    jetf->setPartList(veclist); // Input particle 4-vector list
    jetf->setDURHAM();          // Use DURHAM algorithm
    jetf->setYCut(0.004);       // Set YCut value
    jetf->doFindJets();         // JetFindig
    
    Int_t numjets = jetf->njets();
    

//  Example 1  Do JetFindong with different Y-cut
    jetf->setYCut(0.0060);
    jetf->doFindJets();
    
    Int_t numjets_1 = jetf->njets();
    
//  Example 2  Do JetFindong with different algorithm
    jetf->setJADE();      // Use JADE algorithm
    jetf->doFindJets();

    Int_t numjets_2 = jetf->njets();


    printf("#Tracks %i\n #Jets (DURHAM ycut=0.004) = %i (ycut=0.006) = %i (JADE) = %i \n", 
	   nTracks, numjets, numjets_1, numjets_2);

    event->Clear();
  }

  veclist->Delete(); delete veclist;       
  f.Close();
}





